<!DOCTYPE html>
<html>
<head>
  <title>User Info</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <style>
    .header { background: linear-gradient(to bottom right, #8955c0, #4d0099); background-color: #8955c0; padding: 20px; text-align: center; }
    html {
      background-color: #1a1a1a;
    }
    body {
      background-color: #1a1a1a;
      color: white;
    }
    .box {
      display: flex;
      margin-bottom: 10px;
    }
    .key {
      width: 33%;
      background-color: #5a5a5a;
      padding: 5px;
    }
    .value {
      flex-grow: 1;
      background-color: #3e3e3e;
      padding: 5px;
    }
    .value2 {
      flex-grow: 1;
      background-color: #5e5e5e;
      padding: 5px;
    }
    .value3 {
      width: 100%;
      background-color: #5e5e5e;
      padding: 5px;
    }
    .chart-block {
      /* margin-bottom removed; grid gap provides spacing */
    }
    .chart-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));
      gap: 20px;
      margin: 0 auto;
      max-width: 1200px;
    }
    .filter-btn {
      background-color: #4d0099;
      color: white;
      border: none;
      padding: 10px 15px;
      margin: 5px;
      cursor: pointer;
      border-radius: 4px;
    }
    .filter-btn:hover {
      background-color: #8955c0;
    }
  </style>
  <script>
    if (window.location.href.includes("?")) {
      var notValid = '';
      if (window.location.href.split("?")[1].split("=")[0] === "notValid") {
        notValid = window.location.href.split("?")[1].split("=")[1];
      }
      if (notValid.length > 16) {
        alert('Alias/Name can have max of 16 characters.');
        var url = window.location.href;
        var baseUrl = url.split('?')[0];
        window.location.href = baseUrl;
      } else if (/[^A-Za-z0-9_\s]/.test(notValid)) {
        alert('Alias/Name contains special characters. Only A-Z, a-z, 0-9, space, and underscore are allowed.');
        var url = window.location.href;
        var baseUrl = url.split('?')[0];
        window.location.href = baseUrl;
      } else {
        // do nothing
      }
    }
  </script>
  <script>
    function askForName() {
      var name = prompt("Please enter your name:");
      if (name === null) {
        // If the user cancels, set the default value
        name = "Degenerate";
      }
      // Set the value of a hidden input field with the entered name
      var nameField = document.createElement("input");
      nameField.setAttribute("type", "hidden");
      nameField.setAttribute("name", "name");
      nameField.setAttribute("value", name);
      document.querySelector("form").appendChild(nameField);
      
      // Submit the form
      document.querySelector("form").submit();
    }
  </script>
</head>
<body>
  <% if (user.type === "normal") { %>
    <div class="header"> 
      <h1>User Info</h1> 
    </div>
    <br>
    <div class="box">
      <div class="key">Your Sha256:</div>
      <div class="value"><%= user.tokenHash || "Not Available" %></div>
    </div>
    <div class="box">
      <div class="key">Total Prompts:</div>
      <div class="value"><%= user.promptCount %></div>
    </div>
    <% if (user.promptLimit != -1) { %>
      <div class="box">
        <div class="key">Daily Prompts Left:</div>
        <div class="value"><%= user.promptLimit - user.promptCount %></div>
      </div>
      <div class="box">
        <div class="key">Daily Limit Refills At:</div>
        <div class="value"><%= new Date(user.endTimeLimit).toLocaleString() %></div>
      </div>
    <% } %>
    <div class="box">
      <div class="key">Amount of Unique Ip's overall:</div>
      <div class="value"><%- user.ip.length %></div>
    </div>
    <div class="box">
      <div class="key">Your Alias/Name</div>
      <div class="value"><%= user.alias || "Degenerate" %></div>
      <form class="value2" action="/user/manage/change-alias" method="POST">
        <input type="hidden" name="_csrf_user" value="<%= csrfTokenUser %>">
        <button class="value3" type="button" onclick="askForName()">Change</button>
      </form>
    </div>
  <% } else { %>
    <div class="header"> 
      <h1>User Info</h1> 
    </div>
    <br>
    <div class="box">
      <div class="key">Your Sha256:</div>
      <div class="value"><%= user.tokenHash || "Not Available" %></div>
    </div>
    <% if (user.promptLimit === -1) { %>
      <div class="box">
        <div class="key">Time Left:</div>
        <% if (user.endTimeLimit === -1) { %>
          <div class="value">Not yet activated, use it once to start timer, ( <%= user.timeLimit/60 %> Minutes )</div>
        <% } else { %>
          <div class="value">Expires at: <%= new Date(user.endTimeLimit).toLocaleString() %></div>
        <% } %>
      </div>
    <% } else { %>
      <div class="box">
        <div class="key">Prompts Left:</div>
        <div class="value"><%= user.promptLimit - user.promptCount %></div>
      </div>
    <% } %>
  <% } %>

  <% if (user.promptLimit === -1) { %>
    <div id="chartControls" style="text-align: center; margin-bottom: 20px;"></div>
    <div class="chart-grid">
      <div class="chart-block">
        <canvas id="tokenChart" width="400" height="400"></canvas>
      </div>
      <div class="chart-block">
        <canvas id="promptChart" width="400" height="400"></canvas>
      </div>
      <div class="chart-block">
        <canvas id="tokenComparisonChart" width="400" height="400"></canvas>
      </div>
      <div class="chart-block">
        <canvas id="promptComparisonChart" width="400" height="400"></canvas>
      </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
      // Helper: ensure we always work with an array
      function safeArray(input) {
        if (!input) return [];
        if (Array.isArray(input)) return input;
        if (typeof input === 'object') return Object.values(input);
        return [];
      }

      // Use the current origin to build the URL.
      var url = window.location.origin;
      // The current user's token is passed from the server.
      var userItself = "<%= user.tokenHash %>";

      fetch(url + '/users-stats')
        .then(function(response) {
          return response.json();
        })
        .then(function(data) {
          var allUsers = data.users;
          var currentUser = allUsers.find(function(u) {
            return u.token === userItself;
          });

          if (!currentUser) {
            console.error("Current user stats not found");
            return;
          }
          
          // Get token and prompt data as objects with model names as keys.
          // For example: { "gpt-4o-2024-11-20": 1, "gpt-4-32k": 2 }
          var tokenInputObj = currentUser.allTokenCountInput || {};
          var tokenOutputObj = currentUser.allTokenCountOutput || {};
          var promptObj = currentUser.allPromptCount || {};

          // Merge keys (model names) from all three objects.
          var modelsSet = new Set();
          Object.keys(tokenInputObj).forEach(function(model) { modelsSet.add(model); });
          Object.keys(tokenOutputObj).forEach(function(model) { modelsSet.add(model); });
          Object.keys(promptObj).forEach(function(model) { modelsSet.add(model); });
          var labels = Array.from(modelsSet);

          // Create arrays for chart data using the model names.
          var tokenInputArr = labels.map(function(model) { return tokenInputObj[model] || 0; });
          var tokenOutputArr = labels.map(function(model) { return tokenOutputObj[model] || 0; });
          var promptArr = labels.map(function(model) { return promptObj[model] || 0; });
          
          // Create Token Consumption Over Models Chart (line chart)
          var ctx1 = document.getElementById('tokenChart').getContext('2d');
          var tokenChart = new Chart(ctx1, {
            type: 'line',
            data: {
              labels: labels,
              datasets: [{
                label: 'Token Input',
                data: tokenInputArr,
                borderColor: 'rgba(116,170,156,1)',
                backgroundColor: 'rgba(116,170,156,0.2)',
                fill: false,
                tension: 0.1
              },
              {
                label: 'Token Output',
                data: tokenOutputArr,
                borderColor: 'rgba(212,163,127,1)',
                backgroundColor: 'rgba(212,163,127,0.2)',
                fill: false,
                tension: 0.1
              }]
            },
            options: {
              responsive: true,
              plugins: {
                title: { display: true, text: 'Token Consumption Over Models' }
              }
            }
          });

          // Create Prompt Usage Over Models Chart (line chart)
          var ctx2 = document.getElementById('promptChart').getContext('2d');
          var promptChart = new Chart(ctx2, {
            type: 'line',
            data: {
              labels: labels,
              datasets: [{
                label: 'Usage (Prompt)',
                data: promptArr,
                borderColor: 'rgba(47,77,69,1)',
                backgroundColor: 'rgba(47,77,69,0.2)',
                fill: false,
                tension: 0.1
              }]
            },
            options: {
              responsive: true,
              plugins: {
                title: { display: true, text: 'Prompt Usage Over Models' }
              }
            }
          });

          // Calculate current user's weekly usage.
          var now = new Date();
          var userCreatedAt = currentUser.createdAt ? new Date(currentUser.createdAt) : now;
          var weeksActive = Math.max((now - userCreatedAt) / (7 * 24 * 60 * 60 * 1000), 1);
          var currentTokenInputTotal = tokenInputArr.reduce(function(sum, val) { return sum + val; }, 0);
          var currentTokenOutputTotal = tokenOutputArr.reduce(function(sum, val) { return sum + val; }, 0);
          // Use promptCount directly if available; otherwise sum the prompt values.
          var currentPromptTotal = (typeof currentUser.promptCount === 'number') ? 
                                    currentUser.promptCount : 
                                    promptArr.reduce(function(sum, val) { return sum + val; }, 0);
          var currentTokenInputPerWeek = currentTokenInputTotal / weeksActive;
          var currentTokenOutputPerWeek = currentTokenOutputTotal / weeksActive;
          var currentPromptPerWeek = currentPromptTotal / weeksActive;

          // Function to recalc global averages based on filter.
          function recalcGlobalAverages(filterType) {
            var totalTokenInput = 0, totalTokenOutput = 0, totalPrompt = 0;
            var count = 0;
            allUsers.forEach(function(usr) {
              if (filterType !== 'all' && usr.type !== filterType) return;
              var usrTokenInputTotal = Object.values(usr.allTokenCountInput || {}).reduce(function(sum, val) { return sum + val; }, 0);
              var usrTokenOutputTotal = Object.values(usr.allTokenCountOutput || {}).reduce(function(sum, val) { return sum + val; }, 0);
              var usrPromptTotal = (typeof usr.promptCount === 'number') ? 
                                    usr.promptCount : 
                                    Object.values(usr.allPromptCount || {}).reduce(function(sum, val) { return sum + val; }, 0);
              var createdAt = usr.createdAt ? new Date(usr.createdAt) : now;
              var userWeeks = Math.max((now - createdAt) / (7 * 24 * 60 * 60 * 1000), 1);
              totalTokenInput += usrTokenInputTotal / userWeeks;
              totalTokenOutput += usrTokenOutputTotal / userWeeks;
              totalPrompt += usrPromptTotal / userWeeks;
              count++;
            });
            return {
              avgTokenInput: count ? totalTokenInput / count : 0,
              avgTokenOutput: count ? totalTokenOutput / count : 0,
              avgPrompt: count ? totalPrompt / count : 0
            };
          }

          // Initial global averages (all users)
          var globalAverages = recalcGlobalAverages('all');

          // Create Token Comparison Chart (bar chart)
          var ctxTokenComp = document.getElementById('tokenComparisonChart').getContext('2d');
          var tokenComparisonChart = new Chart(ctxTokenComp, {
            type: 'bar',
            data: {
              labels: ['Token Input (per week)', 'Token Output (per week)'],
              datasets: [{
                label: 'You (per week)',
                data: [currentTokenInputPerWeek, currentTokenOutputPerWeek],
                backgroundColor: 'rgba(54,162,235,0.6)'
              }, {
                label: 'Average (per week)',
                data: [globalAverages.avgTokenInput, globalAverages.avgTokenOutput],
                backgroundColor: 'rgba(255,99,132,0.6)'
              }]
            },
            options: {
              responsive: true,
              plugins: {
                title: { display: true, text: 'Your Token Consumption vs All Users (per week)' }
              },
              scales: { y: { beginAtZero: true } }
            }
          });
          
          // Create Prompt Comparison Chart (bar chart)
          var ctxPromptComp = document.getElementById('promptComparisonChart').getContext('2d');
          var promptComparisonChart = new Chart(ctxPromptComp, {
            type: 'bar',
            data: {
              labels: ['Prompt Usage (per week)'],
              datasets: [{
                label: 'You (per week)',
                data: [currentPromptPerWeek],
                backgroundColor: 'rgba(54,162,235,0.6)'
              }, {
                label: 'Average (per week)',
                data: [globalAverages.avgPrompt],
                backgroundColor: 'rgba(255,99,132,0.6)'
              }]
            },
            options: {
              responsive: true,
              plugins: {
                title: { display: true, text: 'Your Prompt Usage vs All Users (per week)' }
              },
              scales: { y: { beginAtZero: true } }
            }
          });
          
          // Setup filter toggle UI
          var filterContainer = document.getElementById('chartControls');
          if (filterContainer) {
            filterContainer.innerHTML = `
              <button id="filterAll" class="filter-btn">All Users</button>
              <button id="filterNormal" class="filter-btn">Normal Users</button>
              <button id="filterTemp" class="filter-btn">Temp Users</button>
            `;
            document.getElementById('filterAll').addEventListener('click', function() {
              updateCharts('all');
            });
            document.getElementById('filterNormal').addEventListener('click', function() {
              updateCharts('normal');
            });
            document.getElementById('filterTemp').addEventListener('click', function() {
              updateCharts('temp');
            });
          }
          
          // Function to update comparison charts when filter changes.
          function updateCharts(filterType) {
            var newAvg = recalcGlobalAverages(filterType);
            tokenComparisonChart.data.datasets[1].data = [newAvg.avgTokenInput, newAvg.avgTokenOutput];
            tokenComparisonChart.update();
            promptComparisonChart.data.datasets[1].data = [newAvg.avgPrompt];
            promptComparisonChart.update();
          }
        })
        .catch(function(error) {
          console.error("Error fetching user stats:", error);
        });
    </script>
  <% } %>
</body>
</html>
